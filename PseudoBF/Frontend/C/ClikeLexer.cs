//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.5.0.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.5.0.1 D:\\Projects\\C#\\PseudoBF\\PseudoBF\\Frontend\\C\\Clike.g 2013-03-01 19:23:28

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.5.0.1")]
[System.CLSCompliant(false)]
public partial class ClikeLexer : Antlr.Runtime.Lexer
{
	public const int EOF=-1;
	public const int ADD=4;
	public const int AND=5;
	public const int ARRDEF=6;
	public const int ASSIGN=7;
	public const int CHARLIT=8;
	public const int COMMENT=9;
	public const int EQ=10;
	public const int EXPRLIST=11;
	public const int FUNCALL=12;
	public const int FUNCDECL=13;
	public const int FUNCDEF=14;
	public const int GT=15;
	public const int ID=16;
	public const int IDLIST=17;
	public const int IF=18;
	public const int LT=19;
	public const int MUL=20;
	public const int NEQ=21;
	public const int NOT=22;
	public const int NUMBER=23;
	public const int OR=24;
	public const int PROGRAM=25;
	public const int RETURN=26;
	public const int STANDALONE=27;
	public const int STATLIST=28;
	public const int SUB=29;
	public const int VARDEF=30;
	public const int VARNAME=31;
	public const int WHILE=32;
	public const int WHITESPACE=33;
	public const int T__34=34;
	public const int T__35=35;
	public const int T__36=36;
	public const int T__37=37;
	public const int T__38=38;
	public const int T__39=39;
	public const int T__40=40;
	public const int T__41=41;
	public const int T__42=42;
	public const int T__43=43;
	public const int T__44=44;
	public const int T__45=45;
	public const int T__46=46;
	public const int T__47=47;

	// delegates
	// delegators

	public ClikeLexer()
	{
		OnCreated();
	}

	public ClikeLexer(ICharStream input )
		: this(input, new RecognizerSharedState())
	{
	}

	public ClikeLexer(ICharStream input, RecognizerSharedState state)
		: base(input, state)
	{

		OnCreated();
	}
	public override string GrammarFileName { get { return "D:\\Projects\\C#\\PseudoBF\\PseudoBF\\Frontend\\C\\Clike.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	partial void EnterRule_ADD();
	partial void LeaveRule_ADD();

	// $ANTLR start "ADD"
	[GrammarRule("ADD")]
	private void mADD()
	{
		EnterRule_ADD();
		EnterRule("ADD", 1);
		TraceIn("ADD", 1);
		try
		{
			int _type = ADD;
			int _channel = DefaultTokenChannel;
			// D:\\Projects\\C#\\PseudoBF\\PseudoBF\\Frontend\\C\\Clike.g:7:5: ( '+' )
			DebugEnterAlt(1);
			// D:\\Projects\\C#\\PseudoBF\\PseudoBF\\Frontend\\C\\Clike.g:7:7: '+'
			{
			DebugLocation(7, 7);
			Match('+'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ADD", 1);
			LeaveRule("ADD", 1);
			LeaveRule_ADD();
		}
	}
	// $ANTLR end "ADD"

	partial void EnterRule_AND();
	partial void LeaveRule_AND();

	// $ANTLR start "AND"
	[GrammarRule("AND")]
	private void mAND()
	{
		EnterRule_AND();
		EnterRule("AND", 2);
		TraceIn("AND", 2);
		try
		{
			int _type = AND;
			int _channel = DefaultTokenChannel;
			// D:\\Projects\\C#\\PseudoBF\\PseudoBF\\Frontend\\C\\Clike.g:8:5: ( '&&' )
			DebugEnterAlt(1);
			// D:\\Projects\\C#\\PseudoBF\\PseudoBF\\Frontend\\C\\Clike.g:8:7: '&&'
			{
			DebugLocation(8, 7);
			Match("&&"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("AND", 2);
			LeaveRule("AND", 2);
			LeaveRule_AND();
		}
	}
	// $ANTLR end "AND"

	partial void EnterRule_ASSIGN();
	partial void LeaveRule_ASSIGN();

	// $ANTLR start "ASSIGN"
	[GrammarRule("ASSIGN")]
	private void mASSIGN()
	{
		EnterRule_ASSIGN();
		EnterRule("ASSIGN", 3);
		TraceIn("ASSIGN", 3);
		try
		{
			int _type = ASSIGN;
			int _channel = DefaultTokenChannel;
			// D:\\Projects\\C#\\PseudoBF\\PseudoBF\\Frontend\\C\\Clike.g:9:8: ( '=' )
			DebugEnterAlt(1);
			// D:\\Projects\\C#\\PseudoBF\\PseudoBF\\Frontend\\C\\Clike.g:9:10: '='
			{
			DebugLocation(9, 10);
			Match('='); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ASSIGN", 3);
			LeaveRule("ASSIGN", 3);
			LeaveRule_ASSIGN();
		}
	}
	// $ANTLR end "ASSIGN"

	partial void EnterRule_EQ();
	partial void LeaveRule_EQ();

	// $ANTLR start "EQ"
	[GrammarRule("EQ")]
	private void mEQ()
	{
		EnterRule_EQ();
		EnterRule("EQ", 4);
		TraceIn("EQ", 4);
		try
		{
			int _type = EQ;
			int _channel = DefaultTokenChannel;
			// D:\\Projects\\C#\\PseudoBF\\PseudoBF\\Frontend\\C\\Clike.g:10:4: ( '==' )
			DebugEnterAlt(1);
			// D:\\Projects\\C#\\PseudoBF\\PseudoBF\\Frontend\\C\\Clike.g:10:6: '=='
			{
			DebugLocation(10, 6);
			Match("=="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("EQ", 4);
			LeaveRule("EQ", 4);
			LeaveRule_EQ();
		}
	}
	// $ANTLR end "EQ"

	partial void EnterRule_GT();
	partial void LeaveRule_GT();

	// $ANTLR start "GT"
	[GrammarRule("GT")]
	private void mGT()
	{
		EnterRule_GT();
		EnterRule("GT", 5);
		TraceIn("GT", 5);
		try
		{
			int _type = GT;
			int _channel = DefaultTokenChannel;
			// D:\\Projects\\C#\\PseudoBF\\PseudoBF\\Frontend\\C\\Clike.g:11:4: ( '>' )
			DebugEnterAlt(1);
			// D:\\Projects\\C#\\PseudoBF\\PseudoBF\\Frontend\\C\\Clike.g:11:6: '>'
			{
			DebugLocation(11, 6);
			Match('>'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("GT", 5);
			LeaveRule("GT", 5);
			LeaveRule_GT();
		}
	}
	// $ANTLR end "GT"

	partial void EnterRule_LT();
	partial void LeaveRule_LT();

	// $ANTLR start "LT"
	[GrammarRule("LT")]
	private void mLT()
	{
		EnterRule_LT();
		EnterRule("LT", 6);
		TraceIn("LT", 6);
		try
		{
			int _type = LT;
			int _channel = DefaultTokenChannel;
			// D:\\Projects\\C#\\PseudoBF\\PseudoBF\\Frontend\\C\\Clike.g:12:4: ( '<' )
			DebugEnterAlt(1);
			// D:\\Projects\\C#\\PseudoBF\\PseudoBF\\Frontend\\C\\Clike.g:12:6: '<'
			{
			DebugLocation(12, 6);
			Match('<'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LT", 6);
			LeaveRule("LT", 6);
			LeaveRule_LT();
		}
	}
	// $ANTLR end "LT"

	partial void EnterRule_MUL();
	partial void LeaveRule_MUL();

	// $ANTLR start "MUL"
	[GrammarRule("MUL")]
	private void mMUL()
	{
		EnterRule_MUL();
		EnterRule("MUL", 7);
		TraceIn("MUL", 7);
		try
		{
			int _type = MUL;
			int _channel = DefaultTokenChannel;
			// D:\\Projects\\C#\\PseudoBF\\PseudoBF\\Frontend\\C\\Clike.g:13:5: ( '*' )
			DebugEnterAlt(1);
			// D:\\Projects\\C#\\PseudoBF\\PseudoBF\\Frontend\\C\\Clike.g:13:7: '*'
			{
			DebugLocation(13, 7);
			Match('*'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("MUL", 7);
			LeaveRule("MUL", 7);
			LeaveRule_MUL();
		}
	}
	// $ANTLR end "MUL"

	partial void EnterRule_NEQ();
	partial void LeaveRule_NEQ();

	// $ANTLR start "NEQ"
	[GrammarRule("NEQ")]
	private void mNEQ()
	{
		EnterRule_NEQ();
		EnterRule("NEQ", 8);
		TraceIn("NEQ", 8);
		try
		{
			int _type = NEQ;
			int _channel = DefaultTokenChannel;
			// D:\\Projects\\C#\\PseudoBF\\PseudoBF\\Frontend\\C\\Clike.g:14:5: ( '!=' )
			DebugEnterAlt(1);
			// D:\\Projects\\C#\\PseudoBF\\PseudoBF\\Frontend\\C\\Clike.g:14:7: '!='
			{
			DebugLocation(14, 7);
			Match("!="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NEQ", 8);
			LeaveRule("NEQ", 8);
			LeaveRule_NEQ();
		}
	}
	// $ANTLR end "NEQ"

	partial void EnterRule_NOT();
	partial void LeaveRule_NOT();

	// $ANTLR start "NOT"
	[GrammarRule("NOT")]
	private void mNOT()
	{
		EnterRule_NOT();
		EnterRule("NOT", 9);
		TraceIn("NOT", 9);
		try
		{
			int _type = NOT;
			int _channel = DefaultTokenChannel;
			// D:\\Projects\\C#\\PseudoBF\\PseudoBF\\Frontend\\C\\Clike.g:15:5: ( '!' )
			DebugEnterAlt(1);
			// D:\\Projects\\C#\\PseudoBF\\PseudoBF\\Frontend\\C\\Clike.g:15:7: '!'
			{
			DebugLocation(15, 7);
			Match('!'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NOT", 9);
			LeaveRule("NOT", 9);
			LeaveRule_NOT();
		}
	}
	// $ANTLR end "NOT"

	partial void EnterRule_OR();
	partial void LeaveRule_OR();

	// $ANTLR start "OR"
	[GrammarRule("OR")]
	private void mOR()
	{
		EnterRule_OR();
		EnterRule("OR", 10);
		TraceIn("OR", 10);
		try
		{
			int _type = OR;
			int _channel = DefaultTokenChannel;
			// D:\\Projects\\C#\\PseudoBF\\PseudoBF\\Frontend\\C\\Clike.g:16:4: ( '||' )
			DebugEnterAlt(1);
			// D:\\Projects\\C#\\PseudoBF\\PseudoBF\\Frontend\\C\\Clike.g:16:6: '||'
			{
			DebugLocation(16, 6);
			Match("||"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("OR", 10);
			LeaveRule("OR", 10);
			LeaveRule_OR();
		}
	}
	// $ANTLR end "OR"

	partial void EnterRule_SUB();
	partial void LeaveRule_SUB();

	// $ANTLR start "SUB"
	[GrammarRule("SUB")]
	private void mSUB()
	{
		EnterRule_SUB();
		EnterRule("SUB", 11);
		TraceIn("SUB", 11);
		try
		{
			int _type = SUB;
			int _channel = DefaultTokenChannel;
			// D:\\Projects\\C#\\PseudoBF\\PseudoBF\\Frontend\\C\\Clike.g:17:5: ( '-' )
			DebugEnterAlt(1);
			// D:\\Projects\\C#\\PseudoBF\\PseudoBF\\Frontend\\C\\Clike.g:17:7: '-'
			{
			DebugLocation(17, 7);
			Match('-'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("SUB", 11);
			LeaveRule("SUB", 11);
			LeaveRule_SUB();
		}
	}
	// $ANTLR end "SUB"

	partial void EnterRule_T__34();
	partial void LeaveRule_T__34();

	// $ANTLR start "T__34"
	[GrammarRule("T__34")]
	private void mT__34()
	{
		EnterRule_T__34();
		EnterRule("T__34", 12);
		TraceIn("T__34", 12);
		try
		{
			int _type = T__34;
			int _channel = DefaultTokenChannel;
			// D:\\Projects\\C#\\PseudoBF\\PseudoBF\\Frontend\\C\\Clike.g:18:7: ( '(' )
			DebugEnterAlt(1);
			// D:\\Projects\\C#\\PseudoBF\\PseudoBF\\Frontend\\C\\Clike.g:18:9: '('
			{
			DebugLocation(18, 9);
			Match('('); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__34", 12);
			LeaveRule("T__34", 12);
			LeaveRule_T__34();
		}
	}
	// $ANTLR end "T__34"

	partial void EnterRule_T__35();
	partial void LeaveRule_T__35();

	// $ANTLR start "T__35"
	[GrammarRule("T__35")]
	private void mT__35()
	{
		EnterRule_T__35();
		EnterRule("T__35", 13);
		TraceIn("T__35", 13);
		try
		{
			int _type = T__35;
			int _channel = DefaultTokenChannel;
			// D:\\Projects\\C#\\PseudoBF\\PseudoBF\\Frontend\\C\\Clike.g:19:7: ( ')' )
			DebugEnterAlt(1);
			// D:\\Projects\\C#\\PseudoBF\\PseudoBF\\Frontend\\C\\Clike.g:19:9: ')'
			{
			DebugLocation(19, 9);
			Match(')'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__35", 13);
			LeaveRule("T__35", 13);
			LeaveRule_T__35();
		}
	}
	// $ANTLR end "T__35"

	partial void EnterRule_T__36();
	partial void LeaveRule_T__36();

	// $ANTLR start "T__36"
	[GrammarRule("T__36")]
	private void mT__36()
	{
		EnterRule_T__36();
		EnterRule("T__36", 14);
		TraceIn("T__36", 14);
		try
		{
			int _type = T__36;
			int _channel = DefaultTokenChannel;
			// D:\\Projects\\C#\\PseudoBF\\PseudoBF\\Frontend\\C\\Clike.g:20:7: ( ',' )
			DebugEnterAlt(1);
			// D:\\Projects\\C#\\PseudoBF\\PseudoBF\\Frontend\\C\\Clike.g:20:9: ','
			{
			DebugLocation(20, 9);
			Match(','); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__36", 14);
			LeaveRule("T__36", 14);
			LeaveRule_T__36();
		}
	}
	// $ANTLR end "T__36"

	partial void EnterRule_T__37();
	partial void LeaveRule_T__37();

	// $ANTLR start "T__37"
	[GrammarRule("T__37")]
	private void mT__37()
	{
		EnterRule_T__37();
		EnterRule("T__37", 15);
		TraceIn("T__37", 15);
		try
		{
			int _type = T__37;
			int _channel = DefaultTokenChannel;
			// D:\\Projects\\C#\\PseudoBF\\PseudoBF\\Frontend\\C\\Clike.g:21:7: ( ';' )
			DebugEnterAlt(1);
			// D:\\Projects\\C#\\PseudoBF\\PseudoBF\\Frontend\\C\\Clike.g:21:9: ';'
			{
			DebugLocation(21, 9);
			Match(';'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__37", 15);
			LeaveRule("T__37", 15);
			LeaveRule_T__37();
		}
	}
	// $ANTLR end "T__37"

	partial void EnterRule_T__38();
	partial void LeaveRule_T__38();

	// $ANTLR start "T__38"
	[GrammarRule("T__38")]
	private void mT__38()
	{
		EnterRule_T__38();
		EnterRule("T__38", 16);
		TraceIn("T__38", 16);
		try
		{
			int _type = T__38;
			int _channel = DefaultTokenChannel;
			// D:\\Projects\\C#\\PseudoBF\\PseudoBF\\Frontend\\C\\Clike.g:22:7: ( '[' )
			DebugEnterAlt(1);
			// D:\\Projects\\C#\\PseudoBF\\PseudoBF\\Frontend\\C\\Clike.g:22:9: '['
			{
			DebugLocation(22, 9);
			Match('['); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__38", 16);
			LeaveRule("T__38", 16);
			LeaveRule_T__38();
		}
	}
	// $ANTLR end "T__38"

	partial void EnterRule_T__39();
	partial void LeaveRule_T__39();

	// $ANTLR start "T__39"
	[GrammarRule("T__39")]
	private void mT__39()
	{
		EnterRule_T__39();
		EnterRule("T__39", 17);
		TraceIn("T__39", 17);
		try
		{
			int _type = T__39;
			int _channel = DefaultTokenChannel;
			// D:\\Projects\\C#\\PseudoBF\\PseudoBF\\Frontend\\C\\Clike.g:23:7: ( ']' )
			DebugEnterAlt(1);
			// D:\\Projects\\C#\\PseudoBF\\PseudoBF\\Frontend\\C\\Clike.g:23:9: ']'
			{
			DebugLocation(23, 9);
			Match(']'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__39", 17);
			LeaveRule("T__39", 17);
			LeaveRule_T__39();
		}
	}
	// $ANTLR end "T__39"

	partial void EnterRule_T__40();
	partial void LeaveRule_T__40();

	// $ANTLR start "T__40"
	[GrammarRule("T__40")]
	private void mT__40()
	{
		EnterRule_T__40();
		EnterRule("T__40", 18);
		TraceIn("T__40", 18);
		try
		{
			int _type = T__40;
			int _channel = DefaultTokenChannel;
			// D:\\Projects\\C#\\PseudoBF\\PseudoBF\\Frontend\\C\\Clike.g:24:7: ( 'extern' )
			DebugEnterAlt(1);
			// D:\\Projects\\C#\\PseudoBF\\PseudoBF\\Frontend\\C\\Clike.g:24:9: 'extern'
			{
			DebugLocation(24, 9);
			Match("extern"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__40", 18);
			LeaveRule("T__40", 18);
			LeaveRule_T__40();
		}
	}
	// $ANTLR end "T__40"

	partial void EnterRule_T__41();
	partial void LeaveRule_T__41();

	// $ANTLR start "T__41"
	[GrammarRule("T__41")]
	private void mT__41()
	{
		EnterRule_T__41();
		EnterRule("T__41", 19);
		TraceIn("T__41", 19);
		try
		{
			int _type = T__41;
			int _channel = DefaultTokenChannel;
			// D:\\Projects\\C#\\PseudoBF\\PseudoBF\\Frontend\\C\\Clike.g:25:7: ( 'func' )
			DebugEnterAlt(1);
			// D:\\Projects\\C#\\PseudoBF\\PseudoBF\\Frontend\\C\\Clike.g:25:9: 'func'
			{
			DebugLocation(25, 9);
			Match("func"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__41", 19);
			LeaveRule("T__41", 19);
			LeaveRule_T__41();
		}
	}
	// $ANTLR end "T__41"

	partial void EnterRule_T__42();
	partial void LeaveRule_T__42();

	// $ANTLR start "T__42"
	[GrammarRule("T__42")]
	private void mT__42()
	{
		EnterRule_T__42();
		EnterRule("T__42", 20);
		TraceIn("T__42", 20);
		try
		{
			int _type = T__42;
			int _channel = DefaultTokenChannel;
			// D:\\Projects\\C#\\PseudoBF\\PseudoBF\\Frontend\\C\\Clike.g:26:7: ( 'if' )
			DebugEnterAlt(1);
			// D:\\Projects\\C#\\PseudoBF\\PseudoBF\\Frontend\\C\\Clike.g:26:9: 'if'
			{
			DebugLocation(26, 9);
			Match("if"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__42", 20);
			LeaveRule("T__42", 20);
			LeaveRule_T__42();
		}
	}
	// $ANTLR end "T__42"

	partial void EnterRule_T__43();
	partial void LeaveRule_T__43();

	// $ANTLR start "T__43"
	[GrammarRule("T__43")]
	private void mT__43()
	{
		EnterRule_T__43();
		EnterRule("T__43", 21);
		TraceIn("T__43", 21);
		try
		{
			int _type = T__43;
			int _channel = DefaultTokenChannel;
			// D:\\Projects\\C#\\PseudoBF\\PseudoBF\\Frontend\\C\\Clike.g:27:7: ( 'return' )
			DebugEnterAlt(1);
			// D:\\Projects\\C#\\PseudoBF\\PseudoBF\\Frontend\\C\\Clike.g:27:9: 'return'
			{
			DebugLocation(27, 9);
			Match("return"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__43", 21);
			LeaveRule("T__43", 21);
			LeaveRule_T__43();
		}
	}
	// $ANTLR end "T__43"

	partial void EnterRule_T__44();
	partial void LeaveRule_T__44();

	// $ANTLR start "T__44"
	[GrammarRule("T__44")]
	private void mT__44()
	{
		EnterRule_T__44();
		EnterRule("T__44", 22);
		TraceIn("T__44", 22);
		try
		{
			int _type = T__44;
			int _channel = DefaultTokenChannel;
			// D:\\Projects\\C#\\PseudoBF\\PseudoBF\\Frontend\\C\\Clike.g:28:7: ( 'var' )
			DebugEnterAlt(1);
			// D:\\Projects\\C#\\PseudoBF\\PseudoBF\\Frontend\\C\\Clike.g:28:9: 'var'
			{
			DebugLocation(28, 9);
			Match("var"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__44", 22);
			LeaveRule("T__44", 22);
			LeaveRule_T__44();
		}
	}
	// $ANTLR end "T__44"

	partial void EnterRule_T__45();
	partial void LeaveRule_T__45();

	// $ANTLR start "T__45"
	[GrammarRule("T__45")]
	private void mT__45()
	{
		EnterRule_T__45();
		EnterRule("T__45", 23);
		TraceIn("T__45", 23);
		try
		{
			int _type = T__45;
			int _channel = DefaultTokenChannel;
			// D:\\Projects\\C#\\PseudoBF\\PseudoBF\\Frontend\\C\\Clike.g:29:7: ( 'while' )
			DebugEnterAlt(1);
			// D:\\Projects\\C#\\PseudoBF\\PseudoBF\\Frontend\\C\\Clike.g:29:9: 'while'
			{
			DebugLocation(29, 9);
			Match("while"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__45", 23);
			LeaveRule("T__45", 23);
			LeaveRule_T__45();
		}
	}
	// $ANTLR end "T__45"

	partial void EnterRule_T__46();
	partial void LeaveRule_T__46();

	// $ANTLR start "T__46"
	[GrammarRule("T__46")]
	private void mT__46()
	{
		EnterRule_T__46();
		EnterRule("T__46", 24);
		TraceIn("T__46", 24);
		try
		{
			int _type = T__46;
			int _channel = DefaultTokenChannel;
			// D:\\Projects\\C#\\PseudoBF\\PseudoBF\\Frontend\\C\\Clike.g:30:7: ( '{' )
			DebugEnterAlt(1);
			// D:\\Projects\\C#\\PseudoBF\\PseudoBF\\Frontend\\C\\Clike.g:30:9: '{'
			{
			DebugLocation(30, 9);
			Match('{'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__46", 24);
			LeaveRule("T__46", 24);
			LeaveRule_T__46();
		}
	}
	// $ANTLR end "T__46"

	partial void EnterRule_T__47();
	partial void LeaveRule_T__47();

	// $ANTLR start "T__47"
	[GrammarRule("T__47")]
	private void mT__47()
	{
		EnterRule_T__47();
		EnterRule("T__47", 25);
		TraceIn("T__47", 25);
		try
		{
			int _type = T__47;
			int _channel = DefaultTokenChannel;
			// D:\\Projects\\C#\\PseudoBF\\PseudoBF\\Frontend\\C\\Clike.g:31:7: ( '}' )
			DebugEnterAlt(1);
			// D:\\Projects\\C#\\PseudoBF\\PseudoBF\\Frontend\\C\\Clike.g:31:9: '}'
			{
			DebugLocation(31, 9);
			Match('}'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__47", 25);
			LeaveRule("T__47", 25);
			LeaveRule_T__47();
		}
	}
	// $ANTLR end "T__47"

	partial void EnterRule_ID();
	partial void LeaveRule_ID();

	// $ANTLR start "ID"
	[GrammarRule("ID")]
	private void mID()
	{
		EnterRule_ID();
		EnterRule("ID", 26);
		TraceIn("ID", 26);
		try
		{
			int _type = ID;
			int _channel = DefaultTokenChannel;
			// D:\\Projects\\C#\\PseudoBF\\PseudoBF\\Frontend\\C\\Clike.g:41:3: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' )+ )
			DebugEnterAlt(1);
			// D:\\Projects\\C#\\PseudoBF\\PseudoBF\\Frontend\\C\\Clike.g:41:5: ( 'a' .. 'z' | 'A' .. 'Z' | '_' )+
			{
			DebugLocation(41, 5);
			// D:\\Projects\\C#\\PseudoBF\\PseudoBF\\Frontend\\C\\Clike.g:41:5: ( 'a' .. 'z' | 'A' .. 'Z' | '_' )+
			int cnt1=0;
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_1 = input.LA(1);

				if (((LA1_1>='A' && LA1_1<='Z')||LA1_1=='_'||(LA1_1>='a' && LA1_1<='z')))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch (alt1)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Projects\\C#\\PseudoBF\\PseudoBF\\Frontend\\C\\Clike.g:
					{
					DebugLocation(41, 5);
					input.Consume();


					}
					break;

				default:
					if (cnt1 >= 1)
						goto loop1;

					EarlyExitException eee1 = new EarlyExitException( 1, input );
					DebugRecognitionException(eee1);
					throw eee1;
				}
				cnt1++;
			}
			loop1:
				;

			} finally { DebugExitSubRule(1); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ID", 26);
			LeaveRule("ID", 26);
			LeaveRule_ID();
		}
	}
	// $ANTLR end "ID"

	partial void EnterRule_NUMBER();
	partial void LeaveRule_NUMBER();

	// $ANTLR start "NUMBER"
	[GrammarRule("NUMBER")]
	private void mNUMBER()
	{
		EnterRule_NUMBER();
		EnterRule("NUMBER", 27);
		TraceIn("NUMBER", 27);
		try
		{
			int _type = NUMBER;
			int _channel = DefaultTokenChannel;
			// D:\\Projects\\C#\\PseudoBF\\PseudoBF\\Frontend\\C\\Clike.g:42:7: ( ( '0' .. '9' )+ )
			DebugEnterAlt(1);
			// D:\\Projects\\C#\\PseudoBF\\PseudoBF\\Frontend\\C\\Clike.g:42:9: ( '0' .. '9' )+
			{
			DebugLocation(42, 9);
			// D:\\Projects\\C#\\PseudoBF\\PseudoBF\\Frontend\\C\\Clike.g:42:9: ( '0' .. '9' )+
			int cnt2=0;
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, false);
				int LA2_1 = input.LA(1);

				if (((LA2_1>='0' && LA2_1<='9')))
				{
					alt2 = 1;
				}


				} finally { DebugExitDecision(2); }
				switch (alt2)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Projects\\C#\\PseudoBF\\PseudoBF\\Frontend\\C\\Clike.g:
					{
					DebugLocation(42, 9);
					input.Consume();


					}
					break;

				default:
					if (cnt2 >= 1)
						goto loop2;

					EarlyExitException eee2 = new EarlyExitException( 2, input );
					DebugRecognitionException(eee2);
					throw eee2;
				}
				cnt2++;
			}
			loop2:
				;

			} finally { DebugExitSubRule(2); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NUMBER", 27);
			LeaveRule("NUMBER", 27);
			LeaveRule_NUMBER();
		}
	}
	// $ANTLR end "NUMBER"

	partial void EnterRule_CHARLIT();
	partial void LeaveRule_CHARLIT();

	// $ANTLR start "CHARLIT"
	[GrammarRule("CHARLIT")]
	private void mCHARLIT()
	{
		EnterRule_CHARLIT();
		EnterRule("CHARLIT", 28);
		TraceIn("CHARLIT", 28);
		try
		{
			int _type = CHARLIT;
			int _channel = DefaultTokenChannel;
			// D:\\Projects\\C#\\PseudoBF\\PseudoBF\\Frontend\\C\\Clike.g:43:8: ( '\\'' ( ' ' .. '~' ) '\\'' )
			DebugEnterAlt(1);
			// D:\\Projects\\C#\\PseudoBF\\PseudoBF\\Frontend\\C\\Clike.g:43:10: '\\'' ( ' ' .. '~' ) '\\''
			{
			DebugLocation(43, 10);
			Match('\''); 
			DebugLocation(43, 15);
			if ((input.LA(1)>=' ' && input.LA(1)<='~'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(43, 26);
			Match('\''); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("CHARLIT", 28);
			LeaveRule("CHARLIT", 28);
			LeaveRule_CHARLIT();
		}
	}
	// $ANTLR end "CHARLIT"

	partial void EnterRule_COMMENT();
	partial void LeaveRule_COMMENT();

	// $ANTLR start "COMMENT"
	[GrammarRule("COMMENT")]
	private void mCOMMENT()
	{
		EnterRule_COMMENT();
		EnterRule("COMMENT", 29);
		TraceIn("COMMENT", 29);
		try
		{
			int _type = COMMENT;
			int _channel = DefaultTokenChannel;
			// D:\\Projects\\C#\\PseudoBF\\PseudoBF\\Frontend\\C\\Clike.g:44:8: ( '/*' ( ' ' .. '~' )* '*/' )
			DebugEnterAlt(1);
			// D:\\Projects\\C#\\PseudoBF\\PseudoBF\\Frontend\\C\\Clike.g:44:10: '/*' ( ' ' .. '~' )* '*/'
			{
			DebugLocation(44, 10);
			Match("/*"); 

			DebugLocation(44, 15);
			// D:\\Projects\\C#\\PseudoBF\\PseudoBF\\Frontend\\C\\Clike.g:44:15: ( ' ' .. '~' )*
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				int LA3_1 = input.LA(1);

				if ((LA3_1=='*'))
				{
					int LA3_2 = input.LA(2);

					if ((LA3_2=='/'))
					{
						int LA3_3 = input.LA(3);

						if (((LA3_3>=' ' && LA3_3<='~')))
						{
							alt3 = 1;
						}


					}
					else if (((LA3_2>=' ' && LA3_2<='.')||(LA3_2>='0' && LA3_2<='~')))
					{
						alt3 = 1;
					}


				}
				else if (((LA3_1>=' ' && LA3_1<=')')||(LA3_1>='+' && LA3_1<='~')))
				{
					alt3 = 1;
				}


				} finally { DebugExitDecision(3); }
				switch ( alt3 )
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Projects\\C#\\PseudoBF\\PseudoBF\\Frontend\\C\\Clike.g:
					{
					DebugLocation(44, 15);
					input.Consume();


					}
					break;

				default:
					goto loop3;
				}
			}

			loop3:
				;

			} finally { DebugExitSubRule(3); }

			DebugLocation(44, 27);
			Match("*/"); 

			DebugLocation(44, 32);
			 _channel = Hidden; 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("COMMENT", 29);
			LeaveRule("COMMENT", 29);
			LeaveRule_COMMENT();
		}
	}
	// $ANTLR end "COMMENT"

	partial void EnterRule_WHITESPACE();
	partial void LeaveRule_WHITESPACE();

	// $ANTLR start "WHITESPACE"
	[GrammarRule("WHITESPACE")]
	private void mWHITESPACE()
	{
		EnterRule_WHITESPACE();
		EnterRule("WHITESPACE", 30);
		TraceIn("WHITESPACE", 30);
		try
		{
			int _type = WHITESPACE;
			int _channel = DefaultTokenChannel;
			// D:\\Projects\\C#\\PseudoBF\\PseudoBF\\Frontend\\C\\Clike.g:45:11: ( ( ' ' | '\\t' | '\\n' | '\\r' )+ )
			DebugEnterAlt(1);
			// D:\\Projects\\C#\\PseudoBF\\PseudoBF\\Frontend\\C\\Clike.g:45:13: ( ' ' | '\\t' | '\\n' | '\\r' )+
			{
			DebugLocation(45, 13);
			// D:\\Projects\\C#\\PseudoBF\\PseudoBF\\Frontend\\C\\Clike.g:45:13: ( ' ' | '\\t' | '\\n' | '\\r' )+
			int cnt4=0;
			try { DebugEnterSubRule(4);
			while (true)
			{
				int alt4=2;
				try { DebugEnterDecision(4, false);
				int LA4_1 = input.LA(1);

				if (((LA4_1>='\t' && LA4_1<='\n')||LA4_1=='\r'||LA4_1==' '))
				{
					alt4 = 1;
				}


				} finally { DebugExitDecision(4); }
				switch (alt4)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Projects\\C#\\PseudoBF\\PseudoBF\\Frontend\\C\\Clike.g:
					{
					DebugLocation(45, 13);
					input.Consume();


					}
					break;

				default:
					if (cnt4 >= 1)
						goto loop4;

					EarlyExitException eee4 = new EarlyExitException( 4, input );
					DebugRecognitionException(eee4);
					throw eee4;
				}
				cnt4++;
			}
			loop4:
				;

			} finally { DebugExitSubRule(4); }

			DebugLocation(45, 35);
			 _channel = Hidden; 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("WHITESPACE", 30);
			LeaveRule("WHITESPACE", 30);
			LeaveRule_WHITESPACE();
		}
	}
	// $ANTLR end "WHITESPACE"

	public override void mTokens()
	{
		// D:\\Projects\\C#\\PseudoBF\\PseudoBF\\Frontend\\C\\Clike.g:1:8: ( ADD | AND | ASSIGN | EQ | GT | LT | MUL | NEQ | NOT | OR | SUB | T__34 | T__35 | T__36 | T__37 | T__38 | T__39 | T__40 | T__41 | T__42 | T__43 | T__44 | T__45 | T__46 | T__47 | ID | NUMBER | CHARLIT | COMMENT | WHITESPACE )
		int alt5=30;
		try { DebugEnterDecision(5, false);
		switch (input.LA(1))
		{
		case '+':
			{
			alt5 = 1;
			}
			break;
		case '&':
			{
			alt5 = 2;
			}
			break;
		case '=':
			{
			int LA5_2 = input.LA(2);

			if ((LA5_2=='='))
			{
				alt5 = 4;
			}
			else
			{
				alt5 = 3;
			}
			}
			break;
		case '>':
			{
			alt5 = 5;
			}
			break;
		case '<':
			{
			alt5 = 6;
			}
			break;
		case '*':
			{
			alt5 = 7;
			}
			break;
		case '!':
			{
			int LA5_2 = input.LA(2);

			if ((LA5_2=='='))
			{
				alt5 = 8;
			}
			else
			{
				alt5 = 9;
			}
			}
			break;
		case '|':
			{
			alt5 = 10;
			}
			break;
		case '-':
			{
			alt5 = 11;
			}
			break;
		case '(':
			{
			alt5 = 12;
			}
			break;
		case ')':
			{
			alt5 = 13;
			}
			break;
		case ',':
			{
			alt5 = 14;
			}
			break;
		case ';':
			{
			alt5 = 15;
			}
			break;
		case '[':
			{
			alt5 = 16;
			}
			break;
		case ']':
			{
			alt5 = 17;
			}
			break;
		case 'e':
			{
			int LA5_2 = input.LA(2);

			if ((LA5_2=='x'))
			{
				int LA5_3 = input.LA(3);

				if ((LA5_3=='t'))
				{
					int LA5_4 = input.LA(4);

					if ((LA5_4=='e'))
					{
						int LA5_5 = input.LA(5);

						if ((LA5_5=='r'))
						{
							int LA5_6 = input.LA(6);

							if ((LA5_6=='n'))
							{
								int LA5_7 = input.LA(7);

								if (((LA5_7>='A' && LA5_7<='Z')||LA5_7=='_'||(LA5_7>='a' && LA5_7<='z')))
								{
									alt5 = 26;
								}
								else
								{
									alt5 = 18;
								}
							}
							else
							{
								alt5 = 26;
							}
						}
						else
						{
							alt5 = 26;
						}
					}
					else
					{
						alt5 = 26;
					}
				}
				else
				{
					alt5 = 26;
				}
			}
			else
			{
				alt5 = 26;
			}
			}
			break;
		case 'f':
			{
			int LA5_2 = input.LA(2);

			if ((LA5_2=='u'))
			{
				int LA5_3 = input.LA(3);

				if ((LA5_3=='n'))
				{
					int LA5_4 = input.LA(4);

					if ((LA5_4=='c'))
					{
						int LA5_5 = input.LA(5);

						if (((LA5_5>='A' && LA5_5<='Z')||LA5_5=='_'||(LA5_5>='a' && LA5_5<='z')))
						{
							alt5 = 26;
						}
						else
						{
							alt5 = 19;
						}
					}
					else
					{
						alt5 = 26;
					}
				}
				else
				{
					alt5 = 26;
				}
			}
			else
			{
				alt5 = 26;
			}
			}
			break;
		case 'i':
			{
			int LA5_2 = input.LA(2);

			if ((LA5_2=='f'))
			{
				int LA5_3 = input.LA(3);

				if (((LA5_3>='A' && LA5_3<='Z')||LA5_3=='_'||(LA5_3>='a' && LA5_3<='z')))
				{
					alt5 = 26;
				}
				else
				{
					alt5 = 20;
				}
			}
			else
			{
				alt5 = 26;
			}
			}
			break;
		case 'r':
			{
			int LA5_2 = input.LA(2);

			if ((LA5_2=='e'))
			{
				int LA5_3 = input.LA(3);

				if ((LA5_3=='t'))
				{
					int LA5_4 = input.LA(4);

					if ((LA5_4=='u'))
					{
						int LA5_5 = input.LA(5);

						if ((LA5_5=='r'))
						{
							int LA5_6 = input.LA(6);

							if ((LA5_6=='n'))
							{
								int LA5_7 = input.LA(7);

								if (((LA5_7>='A' && LA5_7<='Z')||LA5_7=='_'||(LA5_7>='a' && LA5_7<='z')))
								{
									alt5 = 26;
								}
								else
								{
									alt5 = 21;
								}
							}
							else
							{
								alt5 = 26;
							}
						}
						else
						{
							alt5 = 26;
						}
					}
					else
					{
						alt5 = 26;
					}
				}
				else
				{
					alt5 = 26;
				}
			}
			else
			{
				alt5 = 26;
			}
			}
			break;
		case 'v':
			{
			int LA5_2 = input.LA(2);

			if ((LA5_2=='a'))
			{
				int LA5_3 = input.LA(3);

				if ((LA5_3=='r'))
				{
					int LA5_4 = input.LA(4);

					if (((LA5_4>='A' && LA5_4<='Z')||LA5_4=='_'||(LA5_4>='a' && LA5_4<='z')))
					{
						alt5 = 26;
					}
					else
					{
						alt5 = 22;
					}
				}
				else
				{
					alt5 = 26;
				}
			}
			else
			{
				alt5 = 26;
			}
			}
			break;
		case 'w':
			{
			int LA5_2 = input.LA(2);

			if ((LA5_2=='h'))
			{
				int LA5_3 = input.LA(3);

				if ((LA5_3=='i'))
				{
					int LA5_4 = input.LA(4);

					if ((LA5_4=='l'))
					{
						int LA5_5 = input.LA(5);

						if ((LA5_5=='e'))
						{
							int LA5_6 = input.LA(6);

							if (((LA5_6>='A' && LA5_6<='Z')||LA5_6=='_'||(LA5_6>='a' && LA5_6<='z')))
							{
								alt5 = 26;
							}
							else
							{
								alt5 = 23;
							}
						}
						else
						{
							alt5 = 26;
						}
					}
					else
					{
						alt5 = 26;
					}
				}
				else
				{
					alt5 = 26;
				}
			}
			else
			{
				alt5 = 26;
			}
			}
			break;
		case '{':
			{
			alt5 = 24;
			}
			break;
		case '}':
			{
			alt5 = 25;
			}
			break;
		case 'A':
		case 'B':
		case 'C':
		case 'D':
		case 'E':
		case 'F':
		case 'G':
		case 'H':
		case 'I':
		case 'J':
		case 'K':
		case 'L':
		case 'M':
		case 'N':
		case 'O':
		case 'P':
		case 'Q':
		case 'R':
		case 'S':
		case 'T':
		case 'U':
		case 'V':
		case 'W':
		case 'X':
		case 'Y':
		case 'Z':
		case '_':
		case 'a':
		case 'b':
		case 'c':
		case 'd':
		case 'g':
		case 'h':
		case 'j':
		case 'k':
		case 'l':
		case 'm':
		case 'n':
		case 'o':
		case 'p':
		case 'q':
		case 's':
		case 't':
		case 'u':
		case 'x':
		case 'y':
		case 'z':
			{
			alt5 = 26;
			}
			break;
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			{
			alt5 = 27;
			}
			break;
		case '\'':
			{
			alt5 = 28;
			}
			break;
		case '/':
			{
			alt5 = 29;
			}
			break;
		case '\t':
		case '\n':
		case '\r':
		case ' ':
			{
			alt5 = 30;
			}
			break;
		default:
			{
				NoViableAltException nvae = new NoViableAltException("", 5, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
		}

		} finally { DebugExitDecision(5); }
		switch (alt5)
		{
		case 1:
			DebugEnterAlt(1);
			// D:\\Projects\\C#\\PseudoBF\\PseudoBF\\Frontend\\C\\Clike.g:1:10: ADD
			{
			DebugLocation(1, 10);
			mADD(); 

			}
			break;
		case 2:
			DebugEnterAlt(2);
			// D:\\Projects\\C#\\PseudoBF\\PseudoBF\\Frontend\\C\\Clike.g:1:14: AND
			{
			DebugLocation(1, 14);
			mAND(); 

			}
			break;
		case 3:
			DebugEnterAlt(3);
			// D:\\Projects\\C#\\PseudoBF\\PseudoBF\\Frontend\\C\\Clike.g:1:18: ASSIGN
			{
			DebugLocation(1, 18);
			mASSIGN(); 

			}
			break;
		case 4:
			DebugEnterAlt(4);
			// D:\\Projects\\C#\\PseudoBF\\PseudoBF\\Frontend\\C\\Clike.g:1:25: EQ
			{
			DebugLocation(1, 25);
			mEQ(); 

			}
			break;
		case 5:
			DebugEnterAlt(5);
			// D:\\Projects\\C#\\PseudoBF\\PseudoBF\\Frontend\\C\\Clike.g:1:28: GT
			{
			DebugLocation(1, 28);
			mGT(); 

			}
			break;
		case 6:
			DebugEnterAlt(6);
			// D:\\Projects\\C#\\PseudoBF\\PseudoBF\\Frontend\\C\\Clike.g:1:31: LT
			{
			DebugLocation(1, 31);
			mLT(); 

			}
			break;
		case 7:
			DebugEnterAlt(7);
			// D:\\Projects\\C#\\PseudoBF\\PseudoBF\\Frontend\\C\\Clike.g:1:34: MUL
			{
			DebugLocation(1, 34);
			mMUL(); 

			}
			break;
		case 8:
			DebugEnterAlt(8);
			// D:\\Projects\\C#\\PseudoBF\\PseudoBF\\Frontend\\C\\Clike.g:1:38: NEQ
			{
			DebugLocation(1, 38);
			mNEQ(); 

			}
			break;
		case 9:
			DebugEnterAlt(9);
			// D:\\Projects\\C#\\PseudoBF\\PseudoBF\\Frontend\\C\\Clike.g:1:42: NOT
			{
			DebugLocation(1, 42);
			mNOT(); 

			}
			break;
		case 10:
			DebugEnterAlt(10);
			// D:\\Projects\\C#\\PseudoBF\\PseudoBF\\Frontend\\C\\Clike.g:1:46: OR
			{
			DebugLocation(1, 46);
			mOR(); 

			}
			break;
		case 11:
			DebugEnterAlt(11);
			// D:\\Projects\\C#\\PseudoBF\\PseudoBF\\Frontend\\C\\Clike.g:1:49: SUB
			{
			DebugLocation(1, 49);
			mSUB(); 

			}
			break;
		case 12:
			DebugEnterAlt(12);
			// D:\\Projects\\C#\\PseudoBF\\PseudoBF\\Frontend\\C\\Clike.g:1:53: T__34
			{
			DebugLocation(1, 53);
			mT__34(); 

			}
			break;
		case 13:
			DebugEnterAlt(13);
			// D:\\Projects\\C#\\PseudoBF\\PseudoBF\\Frontend\\C\\Clike.g:1:59: T__35
			{
			DebugLocation(1, 59);
			mT__35(); 

			}
			break;
		case 14:
			DebugEnterAlt(14);
			// D:\\Projects\\C#\\PseudoBF\\PseudoBF\\Frontend\\C\\Clike.g:1:65: T__36
			{
			DebugLocation(1, 65);
			mT__36(); 

			}
			break;
		case 15:
			DebugEnterAlt(15);
			// D:\\Projects\\C#\\PseudoBF\\PseudoBF\\Frontend\\C\\Clike.g:1:71: T__37
			{
			DebugLocation(1, 71);
			mT__37(); 

			}
			break;
		case 16:
			DebugEnterAlt(16);
			// D:\\Projects\\C#\\PseudoBF\\PseudoBF\\Frontend\\C\\Clike.g:1:77: T__38
			{
			DebugLocation(1, 77);
			mT__38(); 

			}
			break;
		case 17:
			DebugEnterAlt(17);
			// D:\\Projects\\C#\\PseudoBF\\PseudoBF\\Frontend\\C\\Clike.g:1:83: T__39
			{
			DebugLocation(1, 83);
			mT__39(); 

			}
			break;
		case 18:
			DebugEnterAlt(18);
			// D:\\Projects\\C#\\PseudoBF\\PseudoBF\\Frontend\\C\\Clike.g:1:89: T__40
			{
			DebugLocation(1, 89);
			mT__40(); 

			}
			break;
		case 19:
			DebugEnterAlt(19);
			// D:\\Projects\\C#\\PseudoBF\\PseudoBF\\Frontend\\C\\Clike.g:1:95: T__41
			{
			DebugLocation(1, 95);
			mT__41(); 

			}
			break;
		case 20:
			DebugEnterAlt(20);
			// D:\\Projects\\C#\\PseudoBF\\PseudoBF\\Frontend\\C\\Clike.g:1:101: T__42
			{
			DebugLocation(1, 101);
			mT__42(); 

			}
			break;
		case 21:
			DebugEnterAlt(21);
			// D:\\Projects\\C#\\PseudoBF\\PseudoBF\\Frontend\\C\\Clike.g:1:107: T__43
			{
			DebugLocation(1, 107);
			mT__43(); 

			}
			break;
		case 22:
			DebugEnterAlt(22);
			// D:\\Projects\\C#\\PseudoBF\\PseudoBF\\Frontend\\C\\Clike.g:1:113: T__44
			{
			DebugLocation(1, 113);
			mT__44(); 

			}
			break;
		case 23:
			DebugEnterAlt(23);
			// D:\\Projects\\C#\\PseudoBF\\PseudoBF\\Frontend\\C\\Clike.g:1:119: T__45
			{
			DebugLocation(1, 119);
			mT__45(); 

			}
			break;
		case 24:
			DebugEnterAlt(24);
			// D:\\Projects\\C#\\PseudoBF\\PseudoBF\\Frontend\\C\\Clike.g:1:125: T__46
			{
			DebugLocation(1, 125);
			mT__46(); 

			}
			break;
		case 25:
			DebugEnterAlt(25);
			// D:\\Projects\\C#\\PseudoBF\\PseudoBF\\Frontend\\C\\Clike.g:1:131: T__47
			{
			DebugLocation(1, 131);
			mT__47(); 

			}
			break;
		case 26:
			DebugEnterAlt(26);
			// D:\\Projects\\C#\\PseudoBF\\PseudoBF\\Frontend\\C\\Clike.g:1:137: ID
			{
			DebugLocation(1, 137);
			mID(); 

			}
			break;
		case 27:
			DebugEnterAlt(27);
			// D:\\Projects\\C#\\PseudoBF\\PseudoBF\\Frontend\\C\\Clike.g:1:140: NUMBER
			{
			DebugLocation(1, 140);
			mNUMBER(); 

			}
			break;
		case 28:
			DebugEnterAlt(28);
			// D:\\Projects\\C#\\PseudoBF\\PseudoBF\\Frontend\\C\\Clike.g:1:147: CHARLIT
			{
			DebugLocation(1, 147);
			mCHARLIT(); 

			}
			break;
		case 29:
			DebugEnterAlt(29);
			// D:\\Projects\\C#\\PseudoBF\\PseudoBF\\Frontend\\C\\Clike.g:1:155: COMMENT
			{
			DebugLocation(1, 155);
			mCOMMENT(); 

			}
			break;
		case 30:
			DebugEnterAlt(30);
			// D:\\Projects\\C#\\PseudoBF\\PseudoBF\\Frontend\\C\\Clike.g:1:163: WHITESPACE
			{
			DebugLocation(1, 163);
			mWHITESPACE(); 

			}
			break;

		}

	}


	#region DFA

	protected override void InitDFAs()
	{
		base.InitDFAs();
	}

	#endregion

}
